package com.gestionfacture;

import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;

public class UserPanel extends JPanel {
    private JTable dgvUsers;
    private JTextField txtUsername;
    private JTextField txtPassword;
    private JComboBox<String> cmbUserType;
    private JButton btnAddUser;
    private JButton btnEditUser;
    private JButton btnDeleteUser;
    private JLabel lblUsername;
    private JLabel lblPassword;
    private JLabel lblUserType;
    private JTextField txtSearchName;
    private JLabel lblSearch;
    private JLabel lblNote;

    public UserPanel() {
        initializeComponents();
        loadUsers();
    }

    private void initializeComponents() {
        setBounds(0, 0, 1356, 688); // Updated to match new mainPanel size
        setBackground(Color.WHITE);
        setLayout(null);

        // Users Table
        String[] columnNames = {"Login", "Password", "Type Utilisateur"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        dgvUsers = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(dgvUsers);
        scrollPane.setBounds(12, 15, 1199, 297);
        add(scrollPane);

        // Username Label
        lblUsername = new JLabel("Username");
        lblUsername.setBounds(14, 420, 75, 20);
        add(lblUsername);

        // Username Text Field
        txtUsername = new JTextField();
        txtUsername.setBounds(102, 420, 200, 27);
        add(txtUsername);

        // Password Label
        lblPassword = new JLabel("Password");
        lblPassword.setBounds(14, 470, 70, 20);
        add(lblPassword);

        // Password Text Field
        txtPassword = new JTextField();
        txtPassword.setBounds(102, 470, 200, 27);
        add(txtPassword);

        // User Type Label
        lblUserType = new JLabel("User Type");
        lblUserType.setBounds(14, 520, 73, 20);
        add(lblUserType);

        // User Type Combo Box
        cmbUserType = new JComboBox<>(new String[]{"Admin", "User"});
        cmbUserType.setBounds(102, 520, 200, 28);
        add(cmbUserType);

        // Add Button
        btnAddUser = new JButton("Add");
        btnAddUser.setBounds(430, 420, 100, 38);
        btnAddUser.setBackground(Color.GREEN);
        btnAddUser.addActionListener(e -> btnAddUser_Click());
        add(btnAddUser);

        // Edit Button
        btnEditUser = new JButton("Edit");
        btnEditUser.setBounds(430, 470, 100, 38);
        btnEditUser.setBackground(Color.BLUE);
        btnEditUser.addActionListener(e -> btnEditUser_Click());
        add(btnEditUser);

        // Delete Button
        btnDeleteUser = new JButton("Delete");
        btnDeleteUser.setBounds(430, 520, 100, 38);
        btnDeleteUser.setBackground(Color.RED);
        btnDeleteUser.addActionListener(e -> btnDeleteUser_Click());
        add(btnDeleteUser);

        // Search Label
        lblSearch = new JLabel("Search By Name:");
        lblSearch.setBounds(884, 325, 124, 20);
        add(lblSearch);

        // Search Text Field
        txtSearchName = new JTextField();
        txtSearchName.setBounds(1014, 322, 200, 27);
        add(txtSearchName);

        // Note Label
        lblNote = new JLabel("* Double-click on a row to edit the user information.");
        lblNote.setBounds(594, 479, 354, 20);
        lblNote.setForeground(Color.RED);
        add(lblNote);

        // Double-click to edit
        dgvUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    int row = dgvUsers.getSelectedRow();
                    if (row >= 0) {
                        txtUsername.setText(dgvUsers.getValueAt(row, 0).toString());
                        txtPassword.setText(dgvUsers.getValueAt(row, 1).toString());
                        cmbUserType.setSelectedItem(dgvUsers.getValueAt(row, 2).toString());
                    }
                }
            }
        });
    }

    private void loadUsers() {
        DefaultTableModel model = (DefaultTableModel) dgvUsers.getModel();
        model.setRowCount(0);

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM Utilisateur");
             ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("Login"),
                    rs.getString("Password"),
                    rs.getString("Type_Utilisateur")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void btnAddUser_Click() {
        String username = txtUsername.getText().trim();
        String password = txtPassword.getText().trim();
        String userType = cmbUserType.getSelectedItem().toString();

        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Utilisateur (Login, Password, Type_Utilisateur) VALUES (?, ?, ?)")) {
            pstmt.setString(1, username);
            pstmt.setString(2, password);
            pstmt.setString(3, userType);
            pstmt.executeUpdate();
            loadUsers();
            clearFields();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error adding user: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnEditUser_Click() {
        String username = txtUsername.getText().trim();
        String password = txtPassword.getText().trim();
        String userType = cmbUserType.getSelectedItem().toString();

        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("UPDATE Utilisateur SET Password = ?, Type_Utilisateur = ? WHERE Login = ?")) {
            pstmt.setString(1, password);
            pstmt.setString(2, userType);
            pstmt.setString(3, username);
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                loadUsers();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "User not found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error editing user: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnDeleteUser_Click() {
        String username = txtUsername.getText().trim();

        if (username.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a user to delete!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("DELETE FROM Utilisateur WHERE Login = ?")) {
            pstmt.setString(1, username);
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                loadUsers();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "User not found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error deleting user: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        txtUsername.setText("");
        txtPassword.setText("");
        cmbUserType.setSelectedIndex(0);
    }
}