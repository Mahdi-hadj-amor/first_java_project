package com.gestionfacture;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

public class UserPanel extends JPanel {
    private JTable dgvUsers;
    private JLabel lblNote;
    private String currentUserLogin; // Store the logged-in user's login
    private Map<Integer, String> originalLogins; // Store original logins for each row

    public UserPanel(String currentUserLogin) {
        this.currentUserLogin = currentUserLogin;
        this.originalLogins = new HashMap<>();
        initializeComponents();
        loadUsers();
    }

    private void initializeComponents() {
        setBounds(0, 0, 1356, 688);
        setBackground(Color.WHITE);
        setLayout(null);

        // Users Table
        String[] columnNames = {"Login", "Password", "Type Utilisateur"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return true; // Allow editing for all columns
            }
        };
        dgvUsers = new JTable(model);
        dgvUsers.setFillsViewportHeight(true);
        dgvUsers.setRowHeight(25);

        // Set JComboBox editor for "Type Utilisateur" column (index 2)
        JComboBox<String> roleComboBox = new JComboBox<>(new String[]{"Admin", "User"});
        dgvUsers.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(roleComboBox));

        // Center-align text in the table
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i < dgvUsers.getColumnCount(); i++) {
            dgvUsers.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        JScrollPane scrollPane = new JScrollPane(dgvUsers);
        scrollPane.setBounds(12, 15, 1199, 297);
        add(scrollPane);

        // Note Label
        lblNote = new JLabel("* Right-click to add/delete a user. Click a cell to edit.");
        lblNote.setBounds(594, 479, 400, 20);
        lblNote.setForeground(Color.RED);
        add(lblNote);

        // Table cell editor listener to save changes to the database
        dgvUsers.getModel().addTableModelListener(e -> {
            int row = e.getFirstRow();
            int column = e.getColumn();
            if (row >= 0 && column >= 0) {
                DefaultTableModel modelData = (DefaultTableModel) dgvUsers.getModel();
                String login = modelData.getValueAt(row, 0) != null ? modelData.getValueAt(row, 0).toString() : "";
                String password = modelData.getValueAt(row, 1) != null ? modelData.getValueAt(row, 1).toString() : "";
                String userType = modelData.getValueAt(row, 2) != null ? modelData.getValueAt(row, 2).toString() : "Admin";

                // Check if this is a new user (was empty before) or an update to an existing user
                boolean isNewUser = !originalLogins.containsKey(row);
                if (isNewUser && !login.isEmpty()) {
                    // Insert new user
                    try (Connection conn = DatabaseConnection.getConnection();
                         PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Utilisateur (Login, Password, Type_Utilisateur) VALUES (?, ?, ?)")) {
                        pstmt.setString(1, login);
                        pstmt.setString(2, password);
                        pstmt.setString(3, userType);
                        pstmt.executeUpdate();
                        originalLogins.put(row, login); // Store the login as original
                        loadUsers();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Erreur lors de l'ajout de l'utilisateur : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                    }
                } else if (!isNewUser) {
                    // Update existing user
                    String originalLogin = originalLogins.get(row);
                    if (!login.equals(originalLogin)) {
                        // Check if the new login already exists
                        try (Connection conn = DatabaseConnection.getConnection();
                             PreparedStatement pstmt = conn.prepareStatement("SELECT COUNT(*) FROM Utilisateur WHERE Login = ? AND Login != ?")) {
                            pstmt.setString(1, login);
                            pstmt.setString(2, originalLogin);
                            ResultSet rs = pstmt.executeQuery();
                            if (rs.next() && rs.getInt(1) > 0) {
                                JOptionPane.showMessageDialog(this, "Ce login existe déjà !", "Erreur", JOptionPane.ERROR_MESSAGE);
                                modelData.setValueAt(originalLogin, row, 0); // Revert to original login
                                return;
                            }
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(this, "Erreur lors de la vérification du login : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    updateUserInDatabase(originalLogin, login, password, userType);
                    if (!login.equals(originalLogin)) {
                        originalLogins.put(row, login); // Update the original login
                    }
                }
            }
        });

        // Right-click context menu for adding and deleting users
        JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem addMenuItem = new JMenuItem("Add New User");
        JMenuItem deleteMenuItem = new JMenuItem("Delete Selected User");

        addMenuItem.addActionListener(e -> addNewUser());
        deleteMenuItem.addActionListener(e -> showDeleteUserDialog());

        dgvUsers.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    int row = dgvUsers.rowAtPoint(e.getPoint());
                    if (row >= 0) {
                        dgvUsers.setRowSelectionInterval(row, row);
                    }
                    popupMenu.show(dgvUsers, e.getX(), e.getY());
                }
            }
        });
    }

    private void loadUsers() {
        DefaultTableModel model = (DefaultTableModel) dgvUsers.getModel();
        model.setRowCount(0);
        originalLogins.clear();

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM Utilisateur");
             ResultSet rs = pstmt.executeQuery()) {
            int row = 0;
            while (rs.next()) {
                String login = rs.getString("Login");
                model.addRow(new Object[]{
                    login,
                    rs.getString("Password"),
                    rs.getString("Type_Utilisateur")
                });
                originalLogins.put(row++, login); // Store the original login for each row
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erreur lors du chargement des utilisateurs : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addNewUser() {
        // Check permission
        if (!hasAddUserPermission()) {
            JOptionPane.showMessageDialog(this, "Vous n'avez pas la permission d'ajouter un utilisateur !", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) dgvUsers.getModel();
        model.addRow(new Object[]{"", "", "Admin"}); // Add a new row with default values
        int newRow = model.getRowCount() - 1;
        dgvUsers.setRowSelectionInterval(newRow, newRow);
        dgvUsers.editCellAt(newRow, 0); // Start editing the "Login" column of the new row
    }

    private boolean hasAddUserPermission() {
        if (currentUserLogin == null) return false;

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT Type_Utilisateur FROM Utilisateur WHERE Login = ?")) {
            pstmt.setString(1, currentUserLogin);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                String userType = rs.getString("Type_Utilisateur");
                return "Admin".equals(userType);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erreur lors de la vérification des permissions : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }

    private void showDeleteUserDialog() {
        int selectedRow = dgvUsers.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un utilisateur à supprimer !", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String username = dgvUsers.getValueAt(selectedRow, 0).toString();
        if (username.isEmpty()) {
            ((DefaultTableModel) dgvUsers.getModel()).removeRow(selectedRow);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer l'utilisateur " + username + " ?", "Confirmer la suppression", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement pstmt = conn.prepareStatement("DELETE FROM Utilisateur WHERE Login = ?")) {
                pstmt.setString(1, username);
                int rows = pstmt.executeUpdate();
                if (rows > 0) {
                    loadUsers();
                } else {
                    JOptionPane.showMessageDialog(this, "Utilisateur introuvable !", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erreur lors de la suppression : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void updateUserInDatabase(String originalLogin, String newLogin, String password, String userType) {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("UPDATE Utilisateur SET Login = ?, Password = ?, Type_Utilisateur = ? WHERE Login = ?")) {
            pstmt.setString(1, newLogin);
            pstmt.setString(2, password);
            pstmt.setString(3, userType);
            pstmt.setString(4, originalLogin);
            int rows = pstmt.executeUpdate();
            if (rows == 0) {
                JOptionPane.showMessageDialog(this, "Utilisateur introuvable !", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erreur lors de la mise à jour : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }
}