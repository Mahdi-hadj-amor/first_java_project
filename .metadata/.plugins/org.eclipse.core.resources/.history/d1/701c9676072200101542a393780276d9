package com.gestionfacture;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

// Cette classe est le panneau pour gérer les utilisateurs
public class UserPanel extends JPanel {

    private JTable tableUsers; // Tableau pour afficher les utilisateurs
    private JTextField txtLogin; // Champ texte pour entrer le login
    private JTextField txtPassword; // Champ texte pour entrer le mot de passe
    private JComboBox<String> comboUserType; // Liste déroulante pour choisir le type d'utilisateur
    private JButton btnAdd; // Bouton pour ajouter un utilisateur
    private JButton btnEdit; // Bouton pour modifier un utilisateur
    private JButton btnDelete; // Bouton pour supprimer un utilisateur

    // Constructeur de la classe UserPanel
    public UserPanel() {
        initializeComponents(); // Appelle la méthode pour initialiser les composants
        loadUsers(); // Charge les utilisateurs depuis la base de données
    }

    // Méthode pour initialiser les composants du panneau
    private void initializeComponents() {
        setBackground(Color.WHITE); // Met le fond du panneau en blanc
        setLayout(new BorderLayout(10, 10)); // Utilise BorderLayout pour organiser les éléments

        // Création du tableau des utilisateurs
        String[] columnNames = {"Login", "Mot de passe", "Type Utilisateur"}; // Noms des colonnes du tableau
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) { // Crée un modèle pour le tableau
            @Override
            public boolean isCellEditable(int row, int column) { // Définit si les cellules peuvent être modifiées
                return false; // Désactive la modification directe dans le tableau
            }
        };
        tableUsers = new JTable(model); // Crée un tableau avec le modèle
        tableUsers.setRowHeight(25); // Définit la hauteur des lignes du tableau

        // Centre le texte dans les cellules du tableau
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer(); // Crée un renderer pour centrer le texte
        centerRenderer.setHorizontalAlignment(JLabel.CENTER); // Centre le texte horizontalement
        for (int i = 0; i < tableUsers.getColumnCount(); i++) { // Parcourt toutes les colonnes du tableau
            tableUsers.getColumnModel().getColumn(i).setCellRenderer(centerRenderer); // Applique le renderer à chaque colonne
        }

        // Ajoute un écouteur pour double-clic sur une ligne du tableau
        tableUsers.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) { // Méthode appelée quand on clique sur le tableau
                if (e.getClickCount() == 2) { // Vérifie si c'est un double-clic
                    int selectedRow = tableUsers.getSelectedRow(); // Récupère la ligne sélectionnée
                    if (selectedRow >= 0) { // Vérifie si une ligne est sélectionnée
                        txtLogin.setText(tableUsers.getValueAt(selectedRow, 0).toString()); // Remplit le champ "Login" avec la valeur de la ligne
                        txtPassword.setText(tableUsers.getValueAt(selectedRow, 1).toString()); // Remplit le champ "Mot de passe" avec la valeur de la ligne
                        comboUserType.setSelectedItem(tableUsers.getValueAt(selectedRow, 2).toString()); // Sélectionne le type d'utilisateur dans la liste déroulante
                        txtLogin.setEnabled(false); // Désactive le champ "Login" car on ne peut pas le modifier
                    }
                }
            }
        });

        // Ajoute le tableau à un panneau avec défilement
        JScrollPane scrollPane = new JScrollPane(tableUsers); // Crée un panneau avec défilement pour le tableau
        add(scrollPane, BorderLayout.CENTER); // Ajoute le tableau au centre du panneau

        // Création du panneau pour les champs et les boutons
        JPanel inputPanel = new JPanel(); // Crée un panneau pour les champs et les boutons
        inputPanel.setLayout(new GridLayout(4, 2, 10, 10)); // Utilise GridLayout pour organiser les éléments

        // Création du champ pour le login
        JLabel lblLogin = new JLabel("Login:"); // Crée un label pour le login
        inputPanel.add(lblLogin); // Ajoute le label au panneau
        txtLogin = new JTextField(); // Crée un champ texte pour le login
        inputPanel.add(txtLogin); // Ajoute le champ texte au panneau

        // Création du champ pour le mot de passe
        JLabel lblPassword = new JLabel("Mot de passe:"); // Crée un label pour le mot de passe
        inputPanel.add(lblPassword); // Ajoute le label au panneau
        txtPassword = new JTextField(); // Crée un champ texte pour le mot de passe
        inputPanel.add(txtPassword); // Ajoute le champ texte au panneau

        // Création de la liste déroulante pour le type d'utilisateur
        JLabel lblUserType = new JLabel("Type Utilisateur:"); // Crée un label pour le type d'utilisateur
        inputPanel.add(lblUserType); // Ajoute le label au panneau
        comboUserType = new JComboBox<>(new String[]{"Admin", "User"}); // Crée une liste déroulante avec "Admin" et "User"
        inputPanel.add(comboUserType); // Ajoute la liste déroulante au panneau

        // Création du panneau pour les boutons
        JPanel buttonPanel = new JPanel(); // Crée un panneau pour les boutons
        buttonPanel.setLayout(new FlowLayout()); // Utilise FlowLayout pour organiser les boutons

        // Création du bouton "Ajouter"
        btnAdd = new JButton("Ajouter"); // Crée un bouton pour ajouter un utilisateur
        btnAdd.addActionListener(e -> addUser()); // Ajoute une action : quand on clique, appelle la méthode addUser
        buttonPanel.add(btnAdd); // Ajoute le bouton au panneau

        // Création du bouton "Modifier"
        btnEdit = new JButton("Modifier"); // Crée un bouton pour modifier un utilisateur
        btnEdit.addActionListener(e -> editUser()); // Ajoute une action : quand on clique, appelle la méthode editUser
        buttonPanel.add(btnEdit); // Ajoute le bouton au panneau

        // Création du bouton "Supprimer"
        btnDelete = new JButton("Supprimer"); // Crée un bouton pour supprimer un utilisateur
        btnDelete.addActionListener(e -> deleteUser()); // Ajoute une action : quand on clique, appelle la méthode deleteUser
        buttonPanel.add(btnDelete); // Ajoute le bouton au panneau

        // Ajoute les panneaux au panneau principal
        JPanel bottomPanel = new JPanel(new BorderLayout()); // Crée un panneau pour organiser les champs et les boutons
        bottomPanel.add(inputPanel, BorderLayout.CENTER); // Ajoute le panneau des champs au centre
        bottomPanel.add(buttonPanel, BorderLayout.SOUTH); // Ajoute le panneau des boutons en bas
        add(bottomPanel, BorderLayout.SOUTH); // Ajoute le panneau complet en bas du UserPanel
    }

    // Méthode pour charger les utilisateurs depuis la base de données
    private void loadUsers() {
        DefaultTableModel model = (DefaultTableModel) tableUsers.getModel(); // Récupère le modèle du tableau
        model.setRowCount(0); // Vide le tableau

        try (Connection conn = DatabaseConnection.getConnection(); // Ouvre une connexion à la base de données
             PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM Utilisateur"); // Requête pour récupérer tous les utilisateurs
             ResultSet rs = pstmt.executeQuery()) { // Exécute la requête et récupère les résultats
            while (rs.next()) { // Parcourt tous les utilisateurs
                model.addRow(new Object[]{ // Ajoute une ligne au tableau
                    rs.getString("Login"), // Récupère le login
                    rs.getString("Password"), // Récupère le mot de passe
                    rs.getString("Type_Utilisateur") // Récupère le type d'utilisateur
                });
            }
        } catch (SQLException e) { // Capture les erreurs de la base de données
            JOptionPane.showMessageDialog(this, "Erreur lors du chargement des utilisateurs : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
        }
    }

    // Méthode pour ajouter un nouvel utilisateur
    private void addUser() {
        String login = txtLogin.getText().trim(); // Récupère le login entré dans le champ
        String password = txtPassword.getText().trim(); // Récupère le mot de passe entré dans le champ
        String userType = comboUserType.getSelectedItem().toString(); // Récupère le type d'utilisateur sélectionné

        if (login.isEmpty() || password.isEmpty()) { // Vérifie si les champs sont vides
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            return; // Arrête la méthode
        }

        try (Connection conn = DatabaseConnection.getConnection(); // Ouvre une connexion à la base de données
             PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Utilisateur (Login, Password, Type_Utilisateur) VALUES (?, ?, ?)")) { // Requête pour ajouter un utilisateur
            pstmt.setString(1, login); // Définit le login dans la requête
            pstmt.setString(2, password); // Définit le mot de passe dans la requête
            pstmt.setString(3, userType); // Définit le type d'utilisateur dans la requête
            pstmt.executeUpdate(); // Exécute la requête pour ajouter l'utilisateur
            loadUsers(); // Recharge la liste des utilisateurs
            clearFields(); // Vide les champs après l'ajout
        } catch (SQLException e) { // Capture les erreurs de la base de données
            JOptionPane.showMessageDialog(this, "Erreur lors de l'ajout de l'utilisateur : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
        }
    }

    // Méthode pour modifier un utilisateur existant
    private void editUser() {
        String login = txtLogin.getText().trim(); // Récupère le login entré dans le champ
        String password = txtPassword.getText().trim(); // Récupère le mot de passe entré dans le champ
        String userType = comboUserType.getSelectedItem().toString(); // Récupère le type d'utilisateur sélectionné

        if (login.isEmpty() || password.isEmpty()) { // Vérifie si les champs sont vides
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            return; // Arrête la méthode
        }

        try (Connection conn = DatabaseConnection.getConnection(); // Ouvre une connexion à la base de données
             PreparedStatement pstmt = conn.prepareStatement("UPDATE Utilisateur SET Password = ?, Type_Utilisateur = ? WHERE Login = ?")) { // Requête pour mettre à jour l'utilisateur
            pstmt.setString(1, password); // Définit le mot de passe dans la requête
            pstmt.setString(2, userType); // Définit le type d'utilisateur dans la requête
            pstmt.setString(3, login); // Définit le login dans la requête
            int rows = pstmt.executeUpdate(); // Exécute la requête et récupère le nombre de lignes affectées
            if (rows > 0) { // Vérifie si la mise à jour a réussi
                loadUsers(); // Recharge la liste des utilisateurs
                clearFields(); // Vide les champs après la modification
                txtLogin.setEnabled(true); // Réactive le champ "Login" pour une prochaine utilisation
            } else { // Si aucune ligne n'a été affectée
                JOptionPane.showMessageDialog(this, "Utilisateur introuvable !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            }
        } catch (SQLException e) { // Capture les erreurs de la base de données
            JOptionPane.showMessageDialog(this, "Erreur lors de la mise à jour : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
        }
    }

    // Méthode pour supprimer un utilisateur sélectionné
    private void deleteUser() {
        int selectedRow = tableUsers.getSelectedRow(); // Récupère la ligne sélectionnée dans le tableau
        if (selectedRow < 0) { // Vérifie si une ligne est sélectionnée
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un utilisateur à supprimer !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            return; // Arrête la méthode
        }

        String username = tableUsers.getValueAt(selectedRow, 0).toString(); // Récupère le login de l'utilisateur sélectionné

        try (Connection conn = DatabaseConnection.getConnection(); // Ouvre une connexion à la base de données
             PreparedStatement pstmt = conn.prepareStatement("DELETE FROM Utilisateur WHERE Login = ?")) { // Requête pour supprimer l'utilisateur
            pstmt.setString(1, username); // Définit le login dans la requête
            int rows = pstmt.executeUpdate(); // Exécute la requête et récupère le nombre de lignes affectées
            if (rows > 0) { // Vérifie si la suppression a réussi
                loadUsers(); // Recharge la liste des utilisateurs
                clearFields(); // Vide les champs après la suppression
            } else { // Si aucune ligne n'a été affectée
                JOptionPane.showMessageDialog(this, "Utilisateur introuvable !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            }
        } catch (SQLException e) { // Capture les erreurs de la base de données
            JOptionPane.showMessageDialog(this, "Erreur lors de la suppression : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
        }
    }

    // Méthode pour vider les champs après une action
    private void clearFields() {
        txtLogin.setText(""); // Vide le champ "Login"
        txtPassword.setText(""); // Vide le champ "Mot de passe"
        comboUserType.setSelectedIndex(0); // Réinitialise la liste déroulante à la première option
        txtLogin.setEnabled(true); // Réactive le champ "Login"
    }
}