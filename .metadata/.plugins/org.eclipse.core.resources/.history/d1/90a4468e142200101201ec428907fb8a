package com.gestionfacture;

import javax.swing.*;
import java.awt.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;

// Cette classe est le panneau pour gérer les utilisateurs
public class UserPanel extends JPanel {

    private JTable dgvUsers; // Tableau pour afficher les utilisateurs
    private JTextField txtUsername; // Champ texte pour entrer le nom d'utilisateur
    private JTextField txtPassword; // Champ texte pour entrer le mot de passe
    private JComboBox<String> cmbUserType; // Liste déroulante pour choisir le type d'utilisateur
    private JButton btnAddUser; // Bouton pour ajouter un utilisateur
    private JButton btnEditUser; // Bouton pour modifier un utilisateur
    private JButton btnDeleteUser; // Bouton pour supprimer un utilisateur
    private JLabel lblUsername; // Label pour le nom d'utilisateur
    private JLabel lblPassword; // Label pour le mot de passe
    private JLabel lblUserType; // Label pour le type d'utilisateur
    private JLabel lblNote; // Label pour afficher une note

    // Constructeur de la classe UserPanel
    public UserPanel() {
        initializeComponents(); // Appelle la méthode pour initialiser les composants
        loadUsers(); // Charge les utilisateurs depuis la base de données
    }

    // Méthode pour initialiser les composants du panneau
    private void initializeComponents() {
        setBounds(0, 0, 1482, 688); // Définit la taille et la position du panneau
        setBackground(Color.WHITE); // Met le fond du panneau en blanc
        setLayout(null); // Utilise un layout manuel (pas de gestionnaire de layout)

        // Création du tableau des utilisateurs
        String[] columnNames = {"Login", "Mot de passe", "Type Utilisateur"}; // Noms des colonnes du tableau
        DefaultTableModel model = new DefaultTableModel(columnNames, 0); // Crée un modèle pour le tableau
        dgvUsers = new JTable(model); // Crée un tableau avec le modèle
        JScrollPane scrollPane = new JScrollPane(dgvUsers); // Crée un panneau avec défilement pour le tableau
        scrollPane.setBounds(12, 15, 1199, 297); // Définit la position et la taille du tableau
        add(scrollPane); // Ajoute le tableau au panneau

        // Création du label pour le nom d'utilisateur
        lblUsername = new JLabel("Nom d'utilisateur"); // Crée un label pour le nom d'utilisateur
        lblUsername.setBounds(14, 420, 75, 20); // Définit la position et la taille du label
        add(lblUsername); // Ajoute le label au panneau

        // Création du champ texte pour le nom d'utilisateur
        txtUsername = new JTextField(); // Crée un champ texte pour le nom d'utilisateur
        txtUsername.setBounds(102, 420, 200, 27); // Définit la position et la taille du champ
        add(txtUsername); // Ajoute le champ texte au panneau

        // Création du label pour le mot de passe
        lblPassword = new JLabel("Mot de passe"); // Crée un label pour le mot de passe
        lblPassword.setBounds(14, 470, 70, 20); // Définit la position et la taille du label
        add(lblPassword); // Ajoute le label au panneau

        // Création du champ texte pour le mot de passe
        txtPassword = new JTextField(); // Crée un champ texte pour le mot de passe
        txtPassword.setBounds(102, 470, 200, 27); // Définit la position et la taille du champ
        add(txtPassword); // Ajoute le champ texte au panneau

        // Création du label pour le type d'utilisateur
        lblUserType = new JLabel("Type Utilisateur"); // Crée un label pour le type d'utilisateur
        lblUserType.setBounds(14, 520, 73, 20); // Définit la position et la taille du label
        add(lblUserType); // Ajoute le label au panneau

        // Création de la liste déroulante pour le type d'utilisateur
        cmbUserType = new JComboBox<>(new String[]{"Admin", "User"}); // Crée une liste avec "Admin" et "User"
        cmbUserType.setBounds(102, 520, 200, 28); // Définit la position et la taille de la liste
        add(cmbUserType); // Ajoute la liste au panneau

        // Création du bouton "Ajouter"
        btnAddUser = new JButton("Ajouter"); // Crée un bouton pour ajouter un utilisateur
        btnAddUser.setBounds(430, 420, 100, 38); // Définit la position et la taille du bouton
        btnAddUser.setBackground(Color.GREEN); // Met la couleur de fond du bouton en vert
        btnAddUser.addActionListener(e -> btnAddUser_Click()); // Ajoute une action quand on clique sur le bouton
        add(btnAddUser); // Ajoute le bouton au panneau

        // Création du bouton "Modifier"
        btnEditUser = new JButton("Modifier"); // Crée un bouton pour modifier un utilisateur
        btnEditUser.setBounds(430, 470, 100, 38); // Définit la position et la taille du bouton
        btnEditUser.setBackground(Color.BLUE); // Met la couleur de fond du bouton en bleu
        btnEditUser.addActionListener(e -> btnEditUser_Click()); // Ajoute une action quand on clique sur le bouton
        add(btnEditUser); // Ajoute le bouton au panneau

        // Création du bouton "Supprimer"
        btnDeleteUser = new JButton("Supprimer"); // Crée un bouton pour supprimer un utilisateur
        btnDeleteUser.setBounds(430, 520, 100, 38); // Définit la position et la taille du bouton
        btnDeleteUser.setBackground(Color.RED); // Met la couleur de fond du bouton en rouge
        btnDeleteUser.addActionListener(e -> btnDeleteUser_Click()); // Ajoute une action quand on clique sur le bouton
        add(btnDeleteUser); // Ajoute le bouton au panneau

        // Création du label pour la note
        lblNote = new JLabel("* Double-cliquez sur une ligne pour modifier les informations."); // Crée un label pour la note
        lblNote.setBounds(594, 479, 354, 20); // Définit la position et la taille du label
        lblNote.setForeground(Color.RED); // Met la couleur du texte en rouge
        add(lblNote); // Ajoute le label au panneau

        // Ajoute un écouteur pour double-clic sur une ligne du tableau
        dgvUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) { // Méthode appelée quand on clique sur le tableau
                if (evt.getClickCount() == 2) { // Vérifie si c'est un double-clic
                    int row = dgvUsers.rowAtPoint(evt.getPoint()); // Récupère la ligne où on a cliqué
                    if (row >= 0) { // Vérifie si on a cliqué sur une ligne valide
                        dgvUsers.setRowSelectionInterval(row, row); // Sélectionne la ligne cliquée
                        // Récupère les valeurs de la ligne et gère les valeurs null
                        String username = dgvUsers.getValueAt(row, 0) != null ? dgvUsers.getValueAt(row, 0).toString() : ""; // Récupère le nom d'utilisateur
                        String password = dgvUsers.getValueAt(row, 1) != null ? dgvUsers.getValueAt(row, 1).toString() : ""; // Récupère le mot de passe
                        String userType = dgvUsers.getValueAt(row, 2) != null ? dgvUsers.getValueAt(row, 2).toString() : "Admin"; // Récupère le type d'utilisateur
                        txtUsername.setText(username); // Remplit le champ "Nom d'utilisateur"
                        txtPassword.setText(password); // Remplit le champ "Mot de passe"
                        cmbUserType.setSelectedItem(userType); // Sélectionne le type d'utilisateur
                        txtUsername.setEnabled(false); // Désactive le champ "Nom d'utilisateur"
                    }
                }
            }
        });
    }

    // Méthode pour charger les utilisateurs depuis la base de données
    private void loadUsers() {
        DefaultTableModel model = (DefaultTableModel) dgvUsers.getModel(); // Récupère le modèle du tableau
        model.setRowCount(0); // Vide le tableau

        try {
            Connection conn = DatabaseConnection.getConnection(); // Ouvre une connexion à la base de données
            Statement stmt = conn.createStatement(); // Crée un objet pour exécuter des requêtes SQL
            ResultSet rs = stmt.executeQuery("SELECT * FROM Utilisateur"); // Exécute une requête pour récupérer tous les utilisateurs
            while (rs.next()) { // Parcourt tous les utilisateurs
                model.addRow(new Object[]{ // Ajoute une ligne au tableau
                    rs.getString("Login"), // Récupère le login
                    rs.getString("Password"), // Récupère le mot de passe
                    rs.getString("Type_Utilisateur") // Récupère le type d'utilisateur
                });
            }
            rs.close(); // Ferme le résultat
            stmt.close(); // Ferme l'objet de requête
            conn.close(); // Ferme la connexion
        } catch (SQLException e) { // Capture les erreurs de la base de données
            e.printStackTrace(); // Affiche les erreurs dans la console
        }
    }

    // Méthode appelée quand on clique sur le bouton "Ajouter"
    private void btnAddUser_Click() {
        String username = txtUsername.getText().trim(); // Récupère le nom d'utilisateur entré
        String password = txtPassword.getText().trim(); // Récupère le mot de passe entré
        String userType = cmbUserType.getSelectedItem().toString(); // Récupère le type d'utilisateur sélectionné

        if (username.isEmpty() || password.isEmpty()) { // Vérifie si les champs sont vides
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            return; // Arrête la méthode
        }

        try {
            Connection conn = DatabaseConnection.getConnection(); // Ouvre une connexion à la base de données
            Statement stmt = conn.createStatement(); // Crée un objet pour exécuter des requêtes SQL
            String query = "INSERT INTO Utilisateur (Login, Password, Type_Utilisateur) VALUES ('" + username + "', '" + password + "', '" + userType + "')"; // Crée la requête SQL pour ajouter un utilisateur
            stmt.executeUpdate(query); // Exécute la requête pour ajouter l'utilisateur
            loadUsers(); // Recharge la liste des utilisateurs
            clearFields(); // Vide les champs après l'ajout
            stmt.close(); // Ferme l'objet de requête
            conn.close(); // Ferme la connexion
        } catch (SQLException e) { // Capture les erreurs de la base de données
            JOptionPane.showMessageDialog(this, "Erreur lors de l'ajout : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
        }
    }

    // Méthode appelée quand on clique sur le bouton "Modifier"
    private void btnEditUser_Click() {
        String username = txtUsername.getText().trim(); // Récupère le nom d'utilisateur entré
        String password = txtPassword.getText().trim(); // Récupère le mot de passe entré
        String userType = cmbUserType.getSelectedItem().toString(); // Récupère le type d'utilisateur sélectionné

        if (username.isEmpty() || password.isEmpty()) { // Vérifie si les champs sont vides
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            return; // Arrête la méthode
        }

        try {
            Connection conn = DatabaseConnection.getConnection(); // Ouvre une connexion à la base de données
            Statement stmt = conn.createStatement(); // Crée un objet pour exécuter des requêtes SQL
            String query = "UPDATE Utilisateur SET Password='" + password + "', Type_Utilisateur='" + userType + "' WHERE Login='" + username + "'"; // Crée la requête SQL pour modifier l'utilisateur
            int rows = stmt.executeUpdate(query); // Exécute la requête et récupère le nombre de lignes affectées
            if (rows > 0) { // Vérifie si la mise à jour a réussi
                loadUsers(); // Recharge la liste des utilisateurs
                clearFields(); // Vide les champs après la modification
                txtUsername.setEnabled(true); // Réactive le champ "Nom d'utilisateur"
            } else { // Si aucune ligne n'a été affectée
                JOptionPane.showMessageDialog(this, "Utilisateur introuvable !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            }
            stmt.close(); // Ferme l'objet de requête
            conn.close(); // Ferme la connexion
        } catch (SQLException e) { // Capture les erreurs de la base de données
            JOptionPane.showMessageDialog(this, "Erreur lors de la modification : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
        }
    }

    // Méthode appelée quand on clique sur le bouton "Supprimer"
    private void btnDeleteUser_Click() {
        int selectedRow = dgvUsers.getSelectedRow(); // Récupère la ligne sélectionnée dans le tableau
        if (selectedRow < 0) { // Vérifie si une ligne est sélectionnée
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un utilisateur à supprimer !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            return; // Arrête la méthode
        }

        String username = dgvUsers.getValueAt(selectedRow, 0).toString(); // Récupère le nom d'utilisateur de la ligne sélectionnée

        // Affiche une boîte de dialogue pour confirmer la suppression
        int response = JOptionPane.showConfirmDialog(this, "Êtes-vous sûr de vouloir supprimer l'utilisateur " + username + " ?", "Confirmer la suppression", JOptionPane.YES_NO_OPTION); // Affiche une boîte de dialogue avec "Oui" et "Non"
        if (response == JOptionPane.YES_OPTION) { // Vérifie si l'utilisateur a cliqué sur "Oui"
            try {
                Connection conn = DatabaseConnection.getConnection(); // Ouvre une connexion à la base de données
                Statement stmt = conn.createStatement(); // Crée un objet pour exécuter des requêtes SQL
                String query = "DELETE FROM Utilisateur WHERE Login='" + username + "'"; // Crée la requête SQL pour supprimer l'utilisateur
                int rows = stmt.executeUpdate(query); // Exécute la requête et récupère le nombre de lignes affectées
                if (rows > 0) { // Vérifie si la suppression a réussi
                    loadUsers(); // Recharge la liste des utilisateurs
                    clearFields(); // Vide les champs après la suppression
                } else { // Si aucune ligne n'a été affectée
                    JOptionPane.showMessageDialog(this, "Utilisateur introuvable !", "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
                }
                stmt.close(); // Ferme l'objet de requête
                conn.close(); // Ferme la connexion
            } catch (SQLException e) { // Capture les erreurs de la base de données
                JOptionPane.showMessageDialog(this, "Erreur lors de la suppression : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE); // Affiche un message d'erreur
            }
        }
    }

    // Méthode pour vider les champs après une action
    private void clearFields() {
        txtUsername.setText(""); // Vide le champ "Nom d'utilisateur"
        txtPassword.setText(""); // Vide le champ "Mot de passe"
        cmbUserType.setSelectedIndex(0); // Réinitialise la liste déroulante à la première option
        txtUsername.setEnabled(true); // Réactive le champ "Nom d'utilisateur"
    }
}